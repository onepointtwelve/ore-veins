buildscript {
    repositories {
        maven { url = "https://plugins.gradle.org/m2/" }
        maven { url = 'https://maven.minecraftforge.net' }
        mavenCentral()
    }

    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
    }
}

apply plugin: 'java'
apply plugin: 'net.minecraftforge.gradle'

File secretSettings = new File(rootDir, 'secret.gradle')
Properties secret = new Properties()
if (secretSettings.exists()) {
    secret.load(secretSettings.newDataInputStream())
}

version = "${mod_version}"
group = "${mod_group}"
archivesBaseName = "${mod_id}"

def version_replaces = [
    mod_id: project.mod_id,
    mod_group: project.mod_group,
    mod_version: project.mod_version,
    mod_release_type: project.mod_release_type,
    mc_version: project.mc_version,
    forge_version: project.forge_version,
]


java.toolchain.languageVersion = JavaLanguageVersion.of(8)


sourceSets {
    main {
        java {
            srcDirs += "$rootDir/src/generated/java"
        }

        resources {
            srcDirs = [
                "$rootDir/src/main/resources",
                "$rootDir/src/generated/resources",
            ]
        }
    }
}

processResources {
    duplicatesStrategy = DuplicatesStrategy.FAIL

    inputs.properties(version_replaces)

    filesMatching("mcmod.info") {
        expand version_replaces
    }
}


task generateJava(type: Copy) {
    from "src/template/java"
    into "src/generated/java"
    expand version_replaces
}

compileJava.dependsOn generateJava


minecraft {
    mappings channel: "${mc_mappings_channel}", version: "${mc_mappings_version}"

    // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg') // Currently, this location cannot be changed from the default.

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be added/remove as needed separated by commas.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'

            // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
            property 'forge.enabledGameTestNamespaces', mod_id

            if (secret.runtime_username != null && secret.runtime_password != null) {
                args '--username', secret.runtime_username, '--password', secret.runtime_password
            }

            mods {
                examplemod {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
            property 'forge.enabledGameTestNamespaces', mod_id

            mods {
                examplemod {
                    source sourceSets.main
                }
            }
        }
    }
}

repositories {
    maven {
        name 'prog'
        url 'https://dvs1.progwml6.com/files/maven'
        content {
            includeGroup 'mezz.jei'
        }
    }

    //ForgeGradle adds these in an afterEvaluate, so we need to catch them as they're added and exclude mod artifacts/groups
    whenObjectAdded {
        if (it instanceof MavenArtifactRepository) {
            def url = it.url.toString()
            if (url == 'https://maven.minecraftforge.net/' || url == 'https://libraries.minecraft.net/' || url == 'https://repo.maven.apache.org/maven2/') {
                try {
                    it.content {
                        excludeGroup 'mezz.jei'
                    }

                    println("Adding exclusions to ${it.url}")

                } catch (Exception ignored) {
                    //oh well
                }
            }
        }
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${mc_version}-${forge_version}"

    //compileOnly fg.deobf("mezz.jei:jei_${mc_version}:${jei_version}:api")
    //runtimeOnly fg.deobf("mezz.jei:jei_${mc_version}:${jei_version}")
}

jar {
    manifest {
        attributes([
            "Specification-Title"     : mod_id,
            "Specification-Vendor"    : mod_id,
            "Specification-Version"   : "1", // We are version 1 of ourselves
            "Implementation-Title"    : project.name,
            "Implementation-Version"  : project.jar.archiveVersion,
            "Implementation-Vendor"   : mod_id,
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

jar.finalizedBy('reobfJar')

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

